services: # The containers we are going to run
  app:
    build:
      context: ./Api # The path in the machine that have the files, in this case root
      dockerfile: Dockerfile # The name of the Dockerfile definition
    container_name: technicalTestCurrencyBird
    restart: unless-stopped
    volumes:
      - ./Api/src:/app/src # To copy changes in the local machine to the container.
    ports:
      - "3000:3000" # To expose the app to the machine localhost (machine-port:container:port)
    networks:
      - api-network # Connect the app to the network, in this case to use the database
    depends_on: # Build dependencies in case one containers needs another to be builded first
      db: # To build after the database
        condition: service_healthy
        restart: true
    env_file:
      - .env

  db: # The database service
    image: postgres # Using the oficial dockerhub image
    container_name: postgres
    networks:
      - api-network # Connect to the network to be used by other containers (ej: the web server)
    ports:
      - "5432:5432" # This isn't necesary, but for test i expose the port
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_NAME}_${NODE_ENV}'"]
      interval: 3s
      timeout: 6s
      retries: 5
      start_period: 2s
      start_interval: 3s
    volumes:
      # To persist the data in the database we have a volume that persist after container deletion
      # and copy the files from the container to the volume.
      - db-volume:/var/lib/postgresql/data 
      - ./Api/db/pg-init-scripts:/docker-entrypoint-initdb.d
    env_file:
      - .env

networks: # All the networks that connects our containers
  api-network:
    driver: bridge

volumes: # All the named volumes needed to persist data after container deletion
  db-volume: